#!/bin/sh

if [ -f ./utils ]; then
    . ./utils
else
    echo "Not found: ./utils. Run testrunner from libexec/tfh/tests" 1>&2
    exit 1
fi

if [ -f ../../../bin/tfh ]; then
    tfh_dir="$(cd ../../../bin && pwd -P)"
    export PATH="$tfh_dir:$PATH"
else
    echoerr "Path to tfh not found. Run testrunner from libexec/tfh/tests"
    exit 1
fi

if [ -n "$TFH_org" ]; then
    # TFH_org may be set but not exported
    export TFH_org
else
    echoerr "TFH_org must be set to run tests"
    exit 1
fi

# A particular test file was requested
if [ -n "$1" ]; then
    # We'll cd into the tests directory, so we only want the test file name.
    tfh_tests="$(basename $1)"

    if [ ! -f "./tests/$tfh_tests" ]; then
        echoerr "Specific test requested but not found:"
        echoerr "$tfh_tests"
        exit 1
    fi
fi

if [ -n "$TFH_TEST_SHELL" ]; then
    shells="$TFH_TEST_SHELL"
elif [ -n "$TFH_TEST_ALL_SHELLS" ]; then
    # posh seems broken for sourcing files when run as
    # posh ./tests/test_name
    # When run interatively it fails to have the right return code for
    # at least listing workspaces.

    # Heirloom bourne shell produces the wrong exit code when executed as
    # heirloom-sh ./tests/test_name
    # It does seem to work interactively so I'll only test it every once in
    # a while

    # Might want to test with /bin/sh also if your /bin/sh is not named
    # anything else below.
    shells="bash dash ksh zsh mksh yash pdksh busybox ash"
else
    # If nothing specific is requested, run tests with whatever /bin/sh is.
    shells="/bin/sh"
fi

cd ./tests
for shell in $shells; do
    # Verify the shell is present
    if [ -z "$(command -v $shell)" ]; then
        echoerr "Skipping tests with $shell - not found"
        continue
    fi

    echoerr "Testing with $shell"
    if [ -z "$tfh_tests" ]; then
        tfh_tests="$(find . -type f -name '[0-9][0-9]*_test*' ! -path '*/.*' | sort)"
    fi

    for tfh_test in $tfh_tests; do
        # busybox is special because it has to be called as `busybox sh`
        if [ "$shell" = busybox ]; then
            shell="busybox sh"
        fi

        if ! $shell "$tfh_test"; then
            exit 1
        fi
    done
    echoerr "Completed $shell tests"
    echoerr
done
cd ..
