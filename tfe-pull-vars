#!/bin/sh

## -------------------------------------------------------------------
##
## tfe-pull-vars: Use the Terraform Enteprise API to output variables
##                from a Terraform Enterprise workspace in tfvars
##                format.
##
## -------------------------------------------------------------------
##
## Copyright (c) 2018 Brent W. Woodruff.  All Rights Reserved.
##
## This file is provided to you under the Mozilla Public License
## Version 2.0 (the "License"); you may not use this file
## except in compliance with the License.  You may obtain
## a copy of the License at
##
##   https://www.mozilla.org/en-US/MPL/2.0/
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
## -------------------------------------------------------------------

###
### Function declarations
###

echoerr () { echo "$@" 1>&2; }

echodebug () {
    if [ -n "$TF_LOG" ]; then
        echoerr
        printf "%s" "$@"
        echoerr
    fi
}

assign_arg () {
    if [ -z "$2" ] || [ "${2#-}" != "$2" ]; then
        echoerr "Parameter $1 is missing a value"
        # exit here will not terminate the script. Using PIPE
        # to kill the current process will not produce a kill
        # message
        kill -PIPE $$
    else
        echo $2
    fi
}

tfe_api_call () {
    curl $curl_silent \
         --header "Authorization: Bearer $token" \
         --header "Content-Type: application/vnd.api+json" \
         $@
}

usage () {
cat << 'EOF'
Usage:

  tfe-pull-vars -name [USER_OR_ORG]/[WORKSPACE] [OPTIONS]

  Output Terraform variables from a Terraform Enterprise workspace in tfvars
  format or environment variables in shell format.

Options:

  -name <name>         Name of the configuration in Terraform Enterprise.
                       This can also be set in the configuration itself.
                       Format is typically: "username_or_org/name".

  -tfe-address <url>   An alternate address to an Terraform Enterprise
                       instance. Defaults to https://app.terraform.io

  -token <token>       Access token to use to upload. If blank or unspecified,
                       the ATLAS_TOKEN environmental variable will be used.

  -var <var-name>      Get a Terraform variable from the Terraform Enterprise
                       workspace. This argument may be specified multiple
                       times.

  -env-var <var-name>  Get an environment variable from the Terraform
                       Enterprise workspace. This argument may be specified
                       multiple times.

  -env false           Get all environment variables instead of Terraform
                       variables.

Notes:

  The curl and jq commands are required.
  Sensitive variable names are provided but their values are empty.

EOF
exit
}

if [ -z "$(command -v jq)" ]; then
    echoerr "The jq command must be installed"
    exit 1
fi

if [ -z "$(command -v curl)" ]; then
    echoerr "The curl command must be installed"
    exit 1
fi

if [ -z "$TMPDIR" ]; then
    TMPDIR=/tmp
fi

tfe_address=https://app.terraform.io
name=
token=
curl_silent="-s"
vars=
env=false
env_vars=

###
### Parse options
###

while [ -n "$1" ]; do
    case "$1" in
        help|-h|-help|--help)
            usage
            ;;
        -name)
            name=$(assign_arg "$1" "$2")
            ;;
        -tfe-address)
            tfe_address=$(assign_arg "$1" "$2")
            ;;
        -token)
            token=$(assign_arg "$1" "$2")
            ;;
		-var)
            # -var can be specified multiple times
            new_var="$(assign_arg "$1" "$2")"
            vars="$( [ -n "$vars" ] && echo "$vars"; echo "$new_var")"
			;;
		-env-var)
            # -env-var can be specified multiple times
            new_var="$(assign_arg "$1" "$2")"
            env_vars="$( [ -n "$env_vars" ] && echo "$env_vars"; echo "$new_var")"
			;;
        -env)
            case "$2" in
                true)
                    env=true
                    ;;
                false)
                    env=false
                    ;;
                *)
                    echoerr "-env should be true or false"
                    exit 1
                    ;;
            esac
            ;;
        *)
            echoerr "Unknown option $1"
            exit 1
            ;;
    esac
    shift
    shift
done

if [ -z "$name" ]; then
    echoerr "-name is a required parameter"
    exit 1
else
    org="${name%/*}"
    workspace="${name#*/}"
fi

if [ -z "$token" ]; then
    token="$ATLAS_TOKEN"
    if [ -z "$token" ]; then
        echoerr 'Set the API token with -token or $ATLAS_TOKEN'
		exit 1
    fi
fi

if [ "$env" = true ] && ( [ -n "$vars" ] || [ -n "$env_vars" ] ); then
    echoerr "-env true cannot be specified along with -var and/or -env-var"
    exit 1
fi

if [ -n "$TF_LOG" ]; then
    curl_silent=
fi

# request template
url="$tfe_address/api/v2/vars?filter%5Borganization%5D%5Busername%5D=$org&filter%5Bworkspace%5D%5Bname%5D=$workspace"

echodebug "[DEBUG] API list variables URL:"
echodebug "$url"

var_get_resp="$(tfe_api_call $url)"
if [ 0 -ne $? ]; then
    echoerr "Error listing variables"
    exit 1
fi

echodebug "[DEBUG] Variable list response:" 
echodebug "$(printf "%s" "$var_get_resp" | jq '.')"

vars_retval=0
tfevar=

if [ -n "$vars" ]; then
    for v in $vars; do
        tfevar="$(printf "%s" "$var_get_resp" | jq -r --arg var "$v" '.data[]
            | select(.attributes.category == "terraform")
            | select(.attributes.key == $var)
            | [
                .attributes.key + " = ",
                (if .attributes.hcl == false or .attributes.sensitive == true then "\"" else empty end),
                .attributes.value,
                (if .attributes.hcl == false or .attributes.sensitive == true then "\"" else empty end)
              ]
            | join("")')"

        if [ -z "$tfevar" ]; then
            echoerr "Variable $v not found"
            vars_retval=1
        else
            echo "$tfevar"
        fi

    done
fi

if [ -n "$env_vars" ]; then
    for v in $env_vars; do
        tfevar="$(printf "%s" "$var_get_resp" | jq -r --arg var "$v" '.data[]
            | select(.attributes.category == "env")
            | select(.attributes.key == $var)
            | .attributes.key + "=\"" + .attributes.value + "\""')"

        if [ -z "$tfevar" ]; then
            echoerr "Variable $v not found"
            vars_retval=1
        else
            echo "$tfevar"
        fi
    done
fi

if [ -n "$vars" ] || [ -n "$env_vars" ]; then
    exit $vars_retval
fi

terraform_tfvars="$(printf "%s" "$var_get_resp" | jq -r '.data[]
    | select(.attributes.category == "terraform")
    | select(.attributes.sensitive == false)
    | [
        .attributes.key + " = ",
        (if .attributes.hcl == false then "\"" else empty end),
        .attributes.value,
        (if .attributes.hcl == false then "\"" else empty end)
      ]
    | join("")')"
if [ 0 -ne $? ]; then
    echoerr "Error parsing API response for Terraform variables"
    exit 1
fi

sensitive_tfvars="$(printf "%s" "$var_get_resp" | jq -r '.data[]
    | select(.attributes.category == "terraform")
    | select(.attributes.sensitive == true)
    | .attributes.key + " = \"\""')"
if [ 0 -ne $? ]; then
    echoerr "Error parsing API response for sensitive Terraform variables"
    exit 1
fi

env_vars="$(printf "%s" "$var_get_resp" | jq -r '.data[]
    | select(.attributes.category == "env")
    | select(.attributes.sensitive == false)
    | .attributes.key + "=\"" + .attributes.value + "\""')"
if [ 0 -ne $? ]; then
    echoerr "Error parsing API response for environment variables"
    exit 1
fi

sensitive_env_vars="$(printf "%s" "$var_get_resp" | jq -r '.data[]
    | select(.attributes.category == "env")
    | select(.attributes.sensitive == true)
    | .attributes.key + "="')"
if [ 0 -ne $? ]; then
    echoerr "Error parsing API response for sensitive environment variables"
    exit 1
fi

if [ "$env" = true ]; then
    if [ -n "$sensitive_env_vars" ]; then
        echo "$sensitive_env_vars"
    fi

    if [ -n "$env_vars" ]; then
        echo "$env_vars"
    fi

    exit
fi

if [ -n "$sensitive_tfvars" ]; then
    echo "$sensitive_tfvars"
fi

if [ -n "$terraform_tfvars" ]; then
    echo "$terraform_tfvars"
fi

