#!/bin/sh

## -------------------------------------------------------------------
##
## tfe: Use the Terraform Enterprise API to perform operations in TFE
##
## -------------------------------------------------------------------
##
## Copyright (c) 2018 Brent W. Woodruff.  All Rights Reserved.
##
## This file is provided to you under the Mozilla Public License
## Version 2.0 (the "License"); you may not use this file
## except in compliance with the License.  You may obtain
## a copy of the License at
##
##   https://www.mozilla.org/en-US/MPL/2.0/
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
## -------------------------------------------------------------------

# The following variables will be set for the purpose of aiding subcommands. All
# bets are off for any other variables used in this script before subcommands
# are executed.
#
# tfe_cmd_dir
# tfe_payload_dir
# tfe_log_redirect
# tfe_tar_verbose
# tfe_curl_silent
# tfe_address
# tfe_org
# tfe_workspace
# tfe_token

###
### Utility function declarations
###

echoerr () { printf "%s\n" "$@" 1>&2; }

echodebug () { [ -n "$TF_LOG" ] && echoerr "$@"; return 0; }

cleanup () {
    if [ -f "$config_payload" ]; then
        echodebug "[DEBUG] Deleting temporary content file"
        rm "$config_payload" 
        if [ 0 -ne $? ]; then
            echoerr "Error deleting temporary config payload file:"
            echoerr "$config_payload"
        fi
    else
        echodebug "[DEBUG] No temporary content file to delete"
    fi
}

tfe_usage_args () {
cat << EOF
 -name <name>         Name of the configuration in Terraform Enterprise.
                      This can also be set in the configuration itself.
                      Format is typically: "username_or_org/name".

 -tfe-address <url>   An alternate address to an Terraform Enterprise
                      instance. Defaults to https://app.terraform.io

 -token <token>       Access token to use to upload. If blank or unspecified,
                      the ATLAS_TOKEN environmental variable will be used.

EOF
}

assign_arg () {
    if [ -z "$2" ] || [ "${2#-}" != "$2" ]; then
        echoerr "Parameter $1 is missing a value"
        # exit here will not terminate the script. Using PIPE
        # to kill the current process will not produce a kill
        # message
        kill -PIPE $$
    else
        echo $2
    fi
}

tfe_api_call () {
    curl -f $tfe_curl_silent \
         --header "Authorization: Bearer $tfe_token" \
         --header "Content-Type: application/vnd.api+json" \
         $@
}

if [ -z "$(command -v jq)" ]; then
    echoerr "The jq command must be installed"
    exit 1
fi

if [ -z "$(command -v curl)" ]; then
    echoerr "The curl command must be installed"
    exit 1
fi

if [ -z "$(command -v readlink)" ]; then
    echoerr "The readlink command must be installed"
    exit 1
fi

if [ -z "$TMPDIR" ]; then
    TMPDIR=/tmp
fi

if [ -n "$TF_LOG" ]; then
    tfe_log_redirect=/dev/stderr
    tfe_tar_verbose=v
    tfe_curl_silent=
else
    tf_log_redirect=/dev/null
    tfe_tar_verbose=
    tfe_curl_silent="-s"
fi

tfe_address=https://app.terraform.io
tfe_name=

tfe_token="$TFE_TOKEN"
if [ -z "$tfe_token" ]; then
    tfe_token="$ATLAS_TOKEN"
fi


# Need to determine the script location and prefix to the needed lib directory.
# The prefix should be the directory that contains the riak-manage directory.
# i.e. /users/usertfe_name/gitclones/terraform-enterprise push (contains lib/tfe)
#      /usr (contains lib/tfe)

# Note that this is not POSIX but portable to many systems with nearly any
# kind of implementation of readlink.

# Get the command used to start this script
target=$0

# If executing via a series of symlinks, resolve them all the way back to the
# script itself. Some danger here of infinitely cycling.
while [ -h "$target" ]; do
    link=$(readlink "$target")
    if [ "${link:0:1}" = "/" ]; then
        # link path is absolute, just need to follow it
        target="$link"
    else
        # link path is relative, need to relatively follow it
        target="${target%/*}"
        target="${target}/${link}"
    fi
done

# Now target should be like the following, where 'script' is not a symlink:
# /some/path/to/the/actual/script

# Get the script tfe_name by removing everything up to the last /
bin_tfe_name="${target##*/}"

# Get the script path, go there, and resolve the full path of symlinks with pwd
tfe_prefix=$(cd ${target%/$bin_tfe_name} && pwd -P)

# Remove /bin and /sbin from the prefix if there is one (i.e. /usr/bin)
tfe_prefix=${tfe_prefix%/bin}
tfe_prefix=${tfe_prefix%/sbin}

# tfe_prefix should now be to something like /usr or /path/to/gitclone/riak-manage

# Set some additional convenience variables
tfe_cmd_dir="${tfe_prefix}/lib/tfe/commands"
tfe_payload_dir="${tfe_prefix}/share/tfe/commands"

# Make sure there's a commands directory
if [ ! -d "${tfe_cmd_dir}" ]; then
    echoerr "Error obtaining commands. Check:"
    echoerr "${tfe_cmd_dir}"
    exit 1
fi

# The help command is handled as a special case to cope with incorrect
# invocations. It is also one of two commands that can be run without giving a
# cluster tfe_name (the other is info). Structuring it this way also allows for it
# to work even if a cluster tfe_name is given.

# Make sure we can load help and info. If not, that's a red flag.
if [ -f "${tfe_cmd_dir}/help" ] ; then
    . "${tfe_cmd_dir}/help"
else
    error_msg "Could not load essential commands. Please check your paths."
    exit 1
fi

# No command was supplied. Try to error out helpfully.
if [ 0 -eq $# ]; then
    tfe_help
    exit 1
fi

# At least one argument given. If is help, run help with any arguments supplied.
# Exit with help's return value.
if [ "help" = $1 ]; then
    shift
    tfe_help $@
    exit $?
fi

# Now, if we haven't exited:
#   First argument is a command
#   Additional arguments are parameters to the command to be run

# Pop the command
cmd="$1"
shift

# Ensure the command exists
if [ ! -f "$tfe_cmd_dir/$cmd" ]; then
    echoerr "Command '$cmd' not found. See 'tfe help' for usage."
    exit 1
fi

# Handle a special case of help dyslexia, e.g.:
#   tfe pushconfig help
if [ 0 -eq $# ] && [ "help" = $cmd ]; then
    # See if the cmd is actually a command that the user probably
    # wants help information for.
    if [ -f "$tfe_cmd_dir/$cmd" ]; then
        tfe_help "$cmd"
        exit 0
    fi
fi

###
### Comb through options for name, token, and address while building
### a list of other arguments to go to the subcommand
###

subcmd_args=

while [ -n "$1" ]; do
    case "$1" in
        -tfe-address)
            tfe_address=$(assign_arg "$1" "$2")
            shift
            shift
            ;;
        -name)
            tfe_name=$(assign_arg "$1" "$2")
            shift
            shift
            ;;
        -token)
            tfe_token=$(assign_arg "$1" "$2")
            shift
            shift
            ;;
        *)
            subcmd_args="$subcmd_args $1"
            shift
            ;;
    esac
done

if [ -z "$tfe_name" ]; then
    echoerr "-name is a required parameter"
    exit 1
else
    tfe_org="${tfe_name%/*}"
    tfe_workspace="${tfe_name#*/}"
fi

# Dispatch the command with all of the following arguments to the appropriate,
# sourced function
. "$tfe_cmd_dir/$cmd"
tfe_$cmd $subcmd_args

# Exit with the exit code returned by the command
exit $?


if [ -z "$tfe_token" ]; then
    tfe_token="$ATLAS_TOKEN"
    if [ -z "$tfe_token" ]; then
        echoerr 'Set the API tfe_token with -tfe_token or $ATLAS_TOKEN'
        exit 1
    fi
fi

if [ -z "$tfe_token" ]; then
    echoerr 'Set the API token with $TFE_TOKEN, -token, or $ATLAS_TOKEN'
    exit 1
fi

# Gets the workspace ID given the organization tfe_name and workspace tfe_name
workspace_id="$( (
    set -e
    echodebug "[DEBUG] Requesting workspace information for $org/$workspace"

    url="$tfe_address/api/v2/organizations/$org/workspaces/$workspace"
    workspace_id_resp="$(tfe_api_call "$url")"
    echodebug "[DEBUG] Workspace ID response:"
    echodebug "$workspace_id_resp"

    workspace_id="$(printf "%s" "$workspace_id_resp" | jq -r '.data.id')"
    echodebug "[DEBUG] Workspace ID: $workspace_id"

    test "$workspace_id"
    echo "$workspace_id"
) 2>$TF_LOG_REDIRECT )"
[ 0 -ne $? ] && { echoerr "Error obtaining workspace ID"; exit 1; }

# Creates a tar.gz of the VCS or directory with the configuration

echodebug "[DEBUG] Creating file for upload"
config_payload="$TMPDIR/content-$(date +%s).tar.gz"

(
    set -e
    cd "$config_dir"
    if [ "$vcs" = true ]; then
        git_branch="$(git rev-parse --abbrev-ref HEAD)"
        git_base_dir="$(git rev-parse --show-toplevel)"
        cd "$git_base_dir"
        git_rel_dir="${PWD/${git_base_dir}\/}"

        tf_state_file="$git_rel_dir/.terraform/terraform.tfstate"
        has_tf_state="$([ -f "$tf_state_file" ] && echo true || echo false)"

        tf_modules_dir="$git_rel_dir/.terraform/modules"
        has_modules="$([ -d "$tf_modules_dir" ] && echo true || echo false)"

        # tar is extremely sensitive to being passed empty values so this case is
        # unfortunately necessary
        case ${has_tf_state}${has_modules}${upload_modules} in
            truetruetrue)
                tar -${tar_verbose}zcf "$config_payload" \
                    $(git ls-tree -r "$git_branch" --name-only --full-tree) \
                    "$tf_state_file" \
                    "$tf_modules_dir"
                ;;
            truefalse*)
                tar -${tar_verbose}zcf "$config_payload" \
                    $(git ls-tree -r "$git_branch" --name-only --full-tree) \
                    "$tf_state_file"
                ;;
            falsetruetrue)
                tar -${tar_verbose}zcf "$config_payload" \
                    $(git ls-tree -r "$git_branch" --name-only --full-tree) \
                    "$tf_modules_dir"
                ;;
            falsefalse*)
                tar -${tar_verbose}zcf "$config_payload" \
                    $(git ls-tree -r "$git_branch" --name-only --full-tree)
                ;;
        esac
    else
        tar -${tar_verbose}zcf "$config_payload" .
    fi
) 2>$TF_LOG_REDIRECT
[ 0 -ne $? ] && { echoerr "Error creating config archive payload"; exit 1; }

echo "Uploading Terraform config..."

echodebug "[DEBUG] Creating a new config version for $workspace"

# The JSON Payload used to create the new configuration version
config_ver_payload='{"data":{"type":"configuration-version"}}'

echodebug "[DEBUG] Creating config version in workspace $workspace_id"

# Creates the configuration version and extractes the upload-url
url=$tfe_address/api/v2/workspaces/$workspace_id/configuration-versions

echodebug "[DEBUG] URL: $url"

upload_url_resp="$(tfe_api_call -d "$config_ver_payload" $url)"
[ 0 -ne $? ] && { echoerr "Error creating config version"; cleanup; exit 1; }

echodebug "[DEBUG] Upload URL response:"
echodebug "$upload_url_resp"

config_id="$(printf "%s" "$upload_url_resp" | jq -r '.data.id')"
[ 0 -ne $? ] && { echoerr "Error parsing API response for config ID"
                 cleanup; exit 1; }

(
    set -e
    url="$(printf "%s" "$upload_url_resp" | jq -r '.data.attributes."upload-url"')"
    echodebug "[DEBUG] Upload URL: $url"
    echodebug "[DEBUG] Uploading content to upload URL"

    upload_config_resp="$(curl $curl_silent -X PUT --data-binary "@$config_payload" ${url})"

    echodebug "[DEBUG] Upload config response:"
    echodebug "$upload_config_resp"
) 2>$TF_LOG_REDIRECT
[ 0 -ne $? ] && { echoerr "Error uploading config archive"; cleanup; exit 1; }

cleanup

run_id="$( (
    set -e
    url=$tfe_address/api/v2/workspaces/$workspace_id/runs
    run_check_resp="$(tfe_api_call $url)"

    echodebug "[DEBUG] Run check response:"
    echodebug "$run_check_resp"

    run_id="$(printf "%s" "$run_check_resp" | jq -r '.data[] | select(.relationships."configuration-version".data.id == "'$config_id'") | .id')"

    echodebug "[DEBUG] Run ID: $run_id"

    test "$run_id"
    echo "$run_id"
) 2>$TF_LOG_REDIRECT )"
[ 0 -ne $? ] && { echoerr "Error obtaining run ID"; exit 1; }

echo "Run $run_id submitted with config $config_id on $org/$workspace"

(
    set -e
    run_status=pending
    lock_id=

    while [ 0 != "$poll_run" ] &&
            ( [ pending = "$run_status"   ] ||
              [ planning = "$run_status"  ] ||
              [ applying = "$run_status"  ] ||
              [ confirmed = "$run_status" ] ); do
        # if the workspace was determined to be locked in the previous
        # poll, don't delay getting the final status and exiting.
        if [ true != "$workspace_locked" ]; then
            sleep $poll_run
        fi

        url=$tfe_address/api/v2/workspaces/$workspace_id/runs
        poll_run_resp=$(tfe_api_call $url)

        echodebug "[DEBUG] Poll run response:"
        echodebug "$poll_run_resp"

        run_status="$(printf "%s" "$poll_run_resp" | jq -r '.data[] | select(.id == "'$run_id'") | .attributes.status')"
        [ 0 -ne $? ] && continue

        echo "$run_status"

        echodebug "[DEBUG] Requesting workspace info for $org/$workspace"
        url="$tfe_address/api/v2/organizations/$org/workspaces/$workspace"
        workspace_info_resp="$(tfe_api_call "$url")"

        echodebug "[DEBUG] Workspace info response:"
        echodebug "$workspace_info_resp"

        workspace_locked="$(printf "%s" "$workspace_info_resp" | jq -r '.data.attributes.locked')"

        if [ true = "$workspace_locked" ]; then
            lock_id="$(printf "%s" "$workspace_info_resp" | jq -r '.data.relationships."locked-by".data.id')"
            if [ "$lock_id" != "$run_id" ]; then
                echo "locked by $lock_id"
                exit
            fi
        fi
    done
) 2>$TF_LOG_REDIRECT
[ 0 -ne $? ] && { echoerr "Error polling run"; exit 1; }
